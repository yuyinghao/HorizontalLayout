package com.xiaoyu.horizontallayout.library;import android.annotation.SuppressLint;import android.content.Context;import android.content.res.TypedArray;import android.database.DataSetObserver;import android.util.AttributeSet;import android.util.DisplayMetrics;import android.view.FocusFinder;import android.view.KeyEvent;import android.view.View;import android.view.WindowManager;import android.widget.BaseAdapter;import android.widget.FrameLayout;import android.widget.Scroller;import com.xiaoyu.horizontallayout.R;public class HorizontalLayout extends FrameLayout {	private int mLeftMargin = 0; //距左边距离	private int mTopMargin = 0; //距上距离	private int mItemMargin = 0;//item间距	private BaseAdapter mAdapter;	private int width = 0;	private Scroller scroller;	private int scrollTime = 1000;		private int screenWidth;//屏幕的宽度		private View mFocuseView;	private int mPosition;		private OnItemClickListener mItemClickListener;	private OnItemFocuseChangeListener mItemFocuseChangeListener;		public void setOnItemClickListener(OnItemClickListener mItemClickListener) {		this.mItemClickListener = mItemClickListener;	}		public void setOnItemFocuseChangeListener(OnItemFocuseChangeListener mItemFocuseChangeListener){		this.mItemFocuseChangeListener = mItemFocuseChangeListener;	}		public interface OnItemClickListener{		public boolean onItemClick(View view, int position);	}		public interface OnItemFocuseChangeListener{		public void onItemFocuseChange(View view, boolean hasFocuse);	}	public HorizontalLayout(Context context, AttributeSet attrs, int defStyle) {		super(context, attrs, defStyle);		prepare(context);		initView(context, attrs);	}		public HorizontalLayout(Context context, AttributeSet attrs) {		super(context, attrs);		prepare(context);		initView(context, attrs);	}		public HorizontalLayout(Context context) {		super(context);	}		@SuppressLint("NewApi")	private void prepare(Context context){		setClipChildren(false);		setChildrenDrawingOrderEnabled(true);		scroller = new Scroller(context);		getScreenWidth(context);	}		private void initView(Context context, AttributeSet attrs){		TypedArray custom = context.obtainStyledAttributes(attrs, R.styleable.HorizontalLayout);		this.mLeftMargin = (int) custom.getDimension(R.styleable.HorizontalLayout_left_scale_space, 0);		this.mTopMargin = (int) custom.getDimension(R.styleable.HorizontalLayout_top_scale_space, 0);		this.mItemMargin = (int) custom.getDimension(R.styleable.HorizontalLayout_item_margin, 0);		custom.recycle();	}		@Override    protected int getChildDrawingOrder(int childCount, int i) {        if (i == childCount - 1) {// 这是最后一个需要刷新的item            return mPosition;        }        if (i == mPosition) {// 这是原本要在最后一个刷新的item            return childCount - 1;        }        return super.getChildDrawingOrder(childCount, i);    }		/**	 * 获得屏幕宽度	 */	private void getScreenWidth(Context context){		WindowManager windowManager = (WindowManager)context.getSystemService(Context.WINDOW_SERVICE);		DisplayMetrics outMetrics = new DisplayMetrics();		windowManager.getDefaultDisplay().getMetrics(outMetrics);		screenWidth = outMetrics.widthPixels;	}		/**	 * 根据传入的adapter添加view	 * @param baseAdapter	 */	public void setContentAdapter(BaseAdapter baseAdapter) {				if(mAdapter != null){			mAdapter.unregisterDataSetObserver(observer);		}				mAdapter = baseAdapter;		mAdapter.registerDataSetObserver(observer);				getAdapterView();			}		private DataSetObserver observer = new DataSetObserver() {		@Override		public void onChanged() {			super.onChanged();			getAdapterView();		}			};		private void getAdapterView(){		clearView();				for (int i = 0; i < mAdapter.getCount(); i++) {			View view = mAdapter.getView(i, null, this);			view.setOnFocusChangeListener(new OnFocusChangeListener() {				@Override				public void onFocusChange(View v, boolean hasFocus) {					if(hasFocus){						mPosition = (Integer)v.getTag(R.string.view_name);						invalidate();	                	viewFocuseScroll(v);					}					if(mItemFocuseChangeListener != null){						mItemFocuseChangeListener.onItemFocuseChange(v, hasFocus);					}				}			});			addView(view);			view.setTag(R.string.view_name, i);		}		if(getChildCount() > 0){			getChildAt(0).requestFocus();		}	}		/**	 * 测量view的实际大小	 */	@Override	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {		super.onMeasure(widthMeasureSpec, heightMeasureSpec);		measureChildren(widthMeasureSpec, heightMeasureSpec);		int measureHeight = measureHeight(heightMeasureSpec);		width = getSumChildrenWidth();		setMeasuredDimension(width, measureHeight);	}		private int measureHeight(int pHeightMeasureSpec) {		int result = 0;		int heightMode = MeasureSpec.getMode(pHeightMeasureSpec);		int heightSize = MeasureSpec.getSize(pHeightMeasureSpec);		switch (heightMode) {		case MeasureSpec.AT_MOST:			result = getMaxChildrenHeight() + mTopMargin;			break;		case MeasureSpec.EXACTLY:			result = heightSize;			break;		}		return result;	}		//获取最高的子元素	private int getMaxChildrenHeight(){		int count = getChildCount();		int maxChildHeight = 0;		for(int i = 0; i < count; i++){			if(maxChildHeight < getChildAt(i).getMeasuredHeight()){				maxChildHeight = getChildAt(i).getMeasuredHeight();			}		}		return maxChildHeight;	}		private int getSumChildrenWidth(){		int sumChildrenWidth = mLeftMargin*2;		int count = getChildCount();		for(int i = 0; i < count; i++){			sumChildrenWidth += getChildAt(i).getMeasuredWidth();			sumChildrenWidth += mItemMargin;		}		return sumChildrenWidth;	}		private int getSumChildrenWidth(int index){		int sumChildrenWidth = mLeftMargin;		int count = getChildCount();		for(int i = 0; i < index && i < count; i++){			sumChildrenWidth += getChildAt(i).getMeasuredWidth();			sumChildrenWidth += mItemMargin;		}		sumChildrenWidth += getChildAt(index).getMeasuredWidth()/2;		return sumChildrenWidth;	}		/**	 * 子view的布局显示	 */	@Override	protected void onLayout(boolean changed, int l, int t, int r, int b) {		int XPostion = getPaddingLeft() + mLeftMargin;		int YPostion = getPaddingTop() + mTopMargin;				int contentCount = getChildCount();		for (int i = 0; i < contentCount; i++) {			View child = getChildAt(i);			child.layout(XPostion, YPostion, child.getMeasuredWidth()					+ XPostion, child.getMeasuredHeight() + YPostion);			XPostion = XPostion + child.getMeasuredWidth() + mItemMargin;		}	}		public void startScroll(int startX, int startY, int dx, int dy, int duration) {        if (!scroller.isFinished())        	scroller.abortAnimation();        scroller.startScroll(startX, startY, dx, dy, duration);        invalidate();    }    @Override    public void computeScroll() {        if (scroller.computeScrollOffset()) {            scrollTo(scroller.getCurrX(), scroller.getCurrY());            postInvalidate();        }    }    	private void viewFocuseScroll(View v) {				if(screenWidth < width){						int position = (Integer) v.getTag(R.string.view_name);					int sX = getScrollX();			int sY = getScrollY();						//想要在的位置			int wantSet = (screenWidth - mLeftMargin)/2 + mLeftMargin;			//本身的位置			int nowSet = getSumChildrenWidth(position);			//本身的位置向右 width - nowSet						if(nowSet < wantSet){				startScroll(sX, sY, 0 - sX, 0, scrollTime);			}else if((width - nowSet) < (screenWidth - mLeftMargin)/2){				int offset = width - screenWidth;				startScroll(sX, sY, offset - sX, 0, scrollTime);			}else{				int offset = nowSet - wantSet;				startScroll(sX, sY, offset - sX, 0, scrollTime);			}		}	}		private void clearView(){		removeAllViews();	}		public void onViewDestroy(){		mAdapter.unregisterDataSetObserver(observer);		clearView();	}		@Override	public boolean dispatchKeyEvent(KeyEvent event) {				if(event.getAction() == KeyEvent.ACTION_DOWN && (event.getKeyCode() == KeyEvent.KEYCODE_ENTER || event.getKeyCode() == KeyEvent.KEYCODE_DPAD_CENTER)){			if(mItemClickListener != null){				//如果回调返回true表示消耗掉了事件				if(mItemClickListener.onItemClick(mFocuseView, (Integer)mFocuseView.getTag(R.string.view_name))){					return true;				}			}		}				return super.dispatchKeyEvent(event);	}		@Override	public void requestChildFocus(View child, View focused) {		super.requestChildFocus(child, focused);				if(focused != mFocuseView){			if(mFocuseView == null){				mFocuseView = getChildAt(0);			}			mFocuseView.requestFocus();		}	}	@Override	public View focusSearch(View focused, int direction) {				if(direction == FOCUS_LEFT || direction == FOCUS_RIGHT){			View tempView = FocusFinder.getInstance().findNextFocus(this, focused, direction);			if(tempView == null){				tempView = focused;			}			mFocuseView = tempView;			return mFocuseView;		}				return super.focusSearch(focused, direction);	}}